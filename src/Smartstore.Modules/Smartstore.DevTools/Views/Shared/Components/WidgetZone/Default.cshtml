@using Smartstore.Core.Widgets

@{
    if (ViewData["widgetzone"] is not IWidgetZone zone)
    {
        return;
    }

    // Check if the visibility cookie is set.
    var visibilityCookie = Request.Cookies[".Smart.WZVisibility"];
    var isVisible = visibilityCookie != "hidden";

    if (zone.Name == "start")
    {
        // Add the offcanvas zone preview menu
        <div id="wz-menu" class="d-none">
            <button class="persistent-toggle btn btn-dark btn-outline-light">Persistent toggle<i class="fa-solid fa-cookie-bite"></i></button>
            <div class="zone-list d-flex flex-column flex-grow-1 overflow-auto custom-scrollbar"></div>
            <button class="temporary-toggle btn btn-dark btn-outline-light">Toggle<span class="small text-muted">Ctrl + Alt + B</span></button>
        </div>
    }
}

@if (zone.PreviewTagName == "meta")
{
    <meta name="widget-zone-name" class="wz-preview@(isVisible ? "" : " d-none")" content="@zone.Name" />
}
else
{
    <span sm-tagname="@zone.PreviewTagName" class="wz-preview badge badge-primary badge-subtle badge-ring text-truncate@(isVisible ? "" : " d-none")" title="@zone.Name"
          attr-class='(zone.PreviewCssClass.HasValue(), zone.PreviewCssClass)'
          attr-style='(zone.PreviewCssStyle.HasValue(), zone.PreviewCssStyle)'>
        <span class="text-truncate">@zone.Name</span>
        @* Maybe later *@
        @*<a href="javascript:;" class="btn-clipboard pretty-link mr-1" data-copy="@zoneName">
            <span><i class="far fa-paste"></i></span>
        </a>*@
    </span>
}

<script sm-if='zone.Name == "end"' type="module">
    import { DevTools } from "@(Url.Content("~/Modules/Smartstore.DevTools/js/smartstore.devtools.js"))";

    // Add widget zone area containers.
    let areas = @Html.Raw(Json.Serialize(ViewBag.WidgetZoneAreas));

    // Add a meta and default area for user-defined zones.
    areas.unshift({
        name: 'Meta',
        zones: [],
    });
    areas.push({
        name: @T("Admin.WidgetZones.UserDefined").JsValue,
        zones: []
    });

    // Make sure the end tag is rendered.
    $(function () {
        const zoneList = document.querySelector('#wz-menu .zone-list');

        // Add div's to '#wz-menu .zone-list' for each element in areas.
        areas.forEach(area => {
            let areaContainer = document.createElement('div');
            areaContainer.classList.add('zone-area', 'd-flex', 'flex-column', 'mb-2', 'd-none');
            areaContainer.setAttribute('data-area', area.name);
            areaContainer.setAttribute('data-zones', area.zones.join(' '));
            areaContainer.innerHTML = `<h6 class="text-muted">${area.name}</h6>`;
            zoneList.appendChild(areaContainer);
        });

        const devTools = new DevTools();
        devTools.initialize();

        const zones = $('.wz-preview');
        zones.each(function() {
            const el = $(this);
            if (el.is('meta')) {
                devTools.registerWidgetZone({
                    name: el.attr('content'),
                    previewTagName: 'meta'
                });
            }
            else {
                devTools.registerWidgetZone({
                    name: el.attr('title'),
                    previewTagName: el[0].tagName.toLowerCase()
                });
            }
        });
    });
</script>