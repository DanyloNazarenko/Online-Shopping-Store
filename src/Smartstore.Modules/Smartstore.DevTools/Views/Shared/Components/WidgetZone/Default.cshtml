@using Smartstore.Core.Widgets

@{
    // TODO: (mw) (dt) Fix tooltip not disappearing when the button is clicked.
    // TODO: (mw) (dt) Closer icon should be an arrow pointing to the right. RTL support?
    // TODO: (mw) (dt) Opener should slide out and in, when the visibility is toggled.
    // TODO: (mw) (dt) Bug? Scrolljump when closing the offcanvas menu after auto scroll.
    // TODO: (mw) (dt) Power button should refresh the page: Detect the cookie state in the filter and show empty zone list with hint to power on, when off. -> Separate component for menu?

    // QUESTION: (mc) (dt) To optimize the performance, should we use the bootstrap icon's SVG-code directly instead of the bootstrap-icon tag helper?

    if (ViewData["widgetzone"] is not IWidgetZone zone)
    {
        return;
    }

    // Check if the visibility cookie is set.
    var visibilityCookie = Request.Cookies[".Smart.WZVisibility"];
    var isVisible = visibilityCookie != "false";
    var zonePreviewClass = isVisible ? "" : " d-none";
    var wzToolClass = isVisible ? " show-wz" : "";

    if (zone.Name == "start")
    {
        // Add the offcanvas zone preview menu
        <a id="wz-menu-toggle" class="d-none d-lg-block btn btn-dark" href="#" data-toggle="offcanvas"
           data-autohide="false" data-blocker="false" data-placement="end" data-fullscreen="false" data-slide="false" data-target="#wz-menu" title="@T("Plugins.Developer.DevTools.WidgetZoneMenu")">
            <i class="far fa-layer-group"></i>
        </a>
        <aside id="wz-menu" class="d-none d-lg-block bg-dark offcanvas offcanvas-end offcanvas-shadow">
            <div class="offcanvas-content d-flex flex-column">
                <div class="wz-zone-list custom-scrollbar custom-scrollbar-invert"></div>

                <div id="wz-toolbar">
                    <a class="wz-tool wz-toggle@(wzToolClass)" data-persistent="true"
                        href="#" rel="nofollow" title="" data-toggle="tooltip" data-placement="top" data-original-title="@T("Plugins.Developer.DevTools.WidgetZoneMenu.PersistentToggle")">
                        <bootstrap-icon name="power" class="bi-fw" />
                    </a>
                    <span class="vr"></span>
                    <a class="wz-tool wz-toggle@(wzToolClass)" attr-class='(!isVisible, "disabled")'
                        href="#" rel="nofollow" title="" data-toggle="tooltip" data-placement="top" data-original-title="@Html.Raw(T("Plugins.Developer.DevTools.WidgetZoneMenu.Toggle"))">
                        <bootstrap-icon name="eye" class="wz-visible bi-fw" attr-class='(!isVisible, "d-none")' />
                        <bootstrap-icon name="eye-slash" class="wz-invisible bi-fw" attr-class='(isVisible, "d-none")' />
                    </a>
                    <span class="vr"></span>
                    <a class="wz-tool wz-sidebar-close"
                        href="#" rel="nofollow" title="" data-toggle="tooltip" data-placement="top" data-original-title="@T("Plugins.Developer.DevTools.WidgetZoneMenu.CloseButton")">
                        <bootstrap-icon name="box-arrow-right" class="bi-fw" />
                    </a>
                </div>
            </div>
        </aside>
    }
}

@if (zone.PreviewTagName == "meta")
{
    <meta name="widget-zone-name" class="wz-preview@(zonePreviewClass)" content="@zone.Name" />
}
else
{
    <span sm-tagname="@zone.PreviewTagName" class="wz-preview badge badge-primary badge-subtle badge-ring text-truncate@(zonePreviewClass)" title="@zone.Name"
          attr-class='(zone.PreviewCssClass.HasValue(), zone.PreviewCssClass)'
          attr-style='(zone.PreviewCssStyle.HasValue(), zone.PreviewCssStyle)'>
        <span class="text-truncate">@zone.Name</span>
    </span>
}

<script sm-if='zone.Name == "end"' type="module">
    @{
        var translationKeys = new[]
        {
            "Common.CopyToClipboard"
        };
    }

    import { DevTools } from "@(Url.Content("~/Modules/Smartstore.DevTools/js/smartstore.devtools.js"))";

    // Add widget zone group containers.
    let groups = @Html.Raw(Json.Serialize(ViewBag.WidgetZoneGroups));

    // Add a meta and default group for user-defined zones.
    groups.unshift({
        name: 'Meta',
        zones: [],
    });
    groups.push({
        name: @T("Admin.WidgetZones.UserDefined").JsValue,
        zones: []
    });

    $(function () {
        const zoneList = document.querySelector('.wz-zone-list');

        // Add div's to '#wz-menu .wz-zone-list' for each element in groups.
        groups.forEach(group => {
            let groupContainer = $(`<div class="wz-zone-group d-none" data-group="${group.name}"><h6 class="text-white">${group.name}</h6></div>`);
            groupContainer.data('groups', group.zones.join(' '))
            $(zoneList).append(groupContainer);
        });

        const devTools = new DevTools();
        devTools.initialize(@(isVisible ? "true" : "false"));

        // Add translations
        devTools.Res = {
            @foreach (var key in translationKeys)
            {
                <text>"@(Html.Raw(key))": @(T(key).JsValue), </text>
            }
        };

        const zones = $('.wz-preview');
        zones.each(function() {
            const el = $(this);
            if (el.is('meta')) {
                devTools.registerWidgetZone({
                    name: el.attr('content'),
                    previewTagName: 'meta'
                });
            }
            else {
                devTools.registerWidgetZone({
                    name: el.attr('title'),
                    previewTagName: el[0].tagName.toLowerCase()
                });
            }
        });
    });
</script>