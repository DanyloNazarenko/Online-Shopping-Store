@model PublicPaymentMethodModel
<!-- Set up a container element for the paypal button -->
<div id="paypal-button-container"
     class="paypal-button-container"
     data-init-transaction-url="@Url.Action("InitTransaction", "PayPal")"
     data-create-order-url="@Url.Action("CreateOrder", "PayPal")"
     data-forward-url="@(Model.IsPaymentSelection ? Url.Action("Confirm", "Checkout") : Url.Action("BillingAddress", "Checkout"))"
     data-shape="@Model.ButtonShape"
     data-color="@Model.ButtonColor"
     attr-style='(Model.IsPaymentSelection && !Model.IsSelectedMethod, "display:none")'></div>

@if (Model.IsGooglePayActive)
{
    <div id="paypal-google-pay-container"
         data-init-transaction-url="@Url.Action("InitTransaction", "PayPal")"
         data-get-transaction-info-url="@Url.Action("GetGooglePayTransactionInfo", "PayPal")"
         data-create-order-url="@Url.Action("CreateOrder", "PayPal")"
         data-forward-url="@Url.Action("BillingAddress", "Checkout")"
         data-is-sandbox="@(Model.IsSandbox ? "true" : "false")"
         data-route-ident="@Model.RouteIdent">
    </div>
}

@*INFO: No target zone here as can also be rendered via AJAX*@
<script data-origin="paypal-payment-selection">
    window.Res.PayPal = {
        "NoScriptsLoaded": "@T("Plugins.Smartstore.PayPal.NoScriptsLoaded")"
    };

    $(function () {
        var ppButton = new PayPalButton("#paypal-button-container", "@Model.Funding");
        // TODO: (mh) Don't mix up jQuery and native DOM. Use .querySelector() here.
        var btnNext = $(".payment-method-next-step-button");
        var btnContainer = $("#paypal-button-container");
        var btnContainerGooglePay = $("#paypal-google-pay-container");

        // Listen for changes to the radio inputs.
        $(document).on("change", "input[name='paymentmethod']", (e) => {
            var isPayPal = false;
            var isGooglePay = false;
            var fundingSource = "paypal";

            if (e.target.value == "Payments.PayPalStandard") {
                isPayPal = true;
            }
            else if (e.target.value == "Payments.PayPalSepa") {
                isPayPal = true;
                fundingSource = "sepa";
            }
            else if (e.target.value == "Payments.PayPalPayLater") {
                isPayPal = true;
                fundingSource = "paylater";
            }
            else if (e.target.value == "Payments.PayPalGooglePay") {
                isGooglePay = true;
                fundingSource = "googlepay";
            }

            if (isPayPal || isGooglePay) {
                if (isPayPal) {
                    ppButton.initPayPalScript(fundingSource, true);
                    btnContainer[0].style.display = 'block';
                    btnContainerGooglePay[0].style.display = 'none';
                }
                else if (isGooglePay) {
                    const ppGooglePayButton = new GooglePayPayPalButton();
                    btnContainer[0].style.display = 'none';
                    btnContainerGooglePay[0].style.display = 'block';
                }

                btnNext[0].style.display = 'none';
            }
            else {
                btnNext[0].style.display = 'block';
                btnContainer[0].style.display = 'none';
                btnContainerGooglePay[0].style.display = 'none';
            }
        });

        $("input[name='paymentmethod']:checked").trigger("change");
    });
</script>

<style sm-if="Model.IsPaymentSelection && Model.IsSelectedMethod">
    .payment-method-next-step-button {
        display: none;
    }
</style>