@using Smartstore.Web.Models.Checkout

@model CheckoutConfirmModel

@{
    Layout = "_Checkout";
    Assets.AppendTitleParts(T("PageTitle.Checkout.Confirm"));
    Assets.BodyAttributes.AppendCssClass("no-offcanvas-cart content-overflow-initial");
    Assets.AddMetaRobots();
}

<widget target-zone="order_progress">
    @await Component.InvokeAsync("CheckoutProgress", new { action = Model.ActionName })
</widget>

<div class="page checkout-confirm-page">
    <div class="page-title">
        <h1 class="h3">@T("Checkout.ConfirmYourOrder")</h1>
    </div>
    <div class="page-body checkout-data">
        <form asp-action="Confirm" id="confirm-order-form" method="post">
            <zone name="checkout_confirm_top" />

            <div class="order-summary-content">
                <div class="row cart-container">
                    <div class="col-lg-7 col-xl-8">
                        <partial name="ConfirmDetails" />
                    </div>
                    <div class="col-lg-5 col-xl-4">
                        <partial name="CheckoutOrderTotals" />
                    </div>
                </div>
            </div>

            <zone name="checkout_confirm_bottom" />
        </form>
    </div>
</div>

<script sm-target-zone="scripts" data-origin="checkout-confirm">
    $(function () {
        var buyButton = $('.btn-buy');

        // Buy button has been clicked.
        buyButton.on('click', function () {
            processBuyButtonClick(false);
        });

        // Simulate buy button click.
        $(document).on('clickBuyButton', function (e) {
            processBuyButtonClick(e.customerAgreed, e.showThrobber);
        });

        // Report error.
        $(document).on('reportError', function (e) {
            if (!_.isEmpty(e.message)) {
                var str = '<div class="alert alert-danger mb-3"><ul>';
                if (_.isArray(e.message)) {
                    $.each(e.message, function (index, value) {
                        str += '<li>' + value + '</li>';
                    });
                }
                else {
                    str += '<li>' + e.message + '</li>';
                }
                str += '</ul></div>';

                var warnings = $('#confirm-warnings');
                warnings.html(str);

                try {
                    setBuyButtonState(false);
                    $.throbber.hide(true);
                    $.scrollTo(warnings, 800, { offset: -20 });
                }
                catch (e) { }
            }
        });

        @if (Model.TermsOfServiceEnabled)
        {<text>
            $('.terms-trigger').on('click', function (e) {
                e.preventDefault();
                $('#terms-of-service-modal .modal-body').html('<iframe id="iframe-terms-of-service" src="' + $(this).attr('href') + '" frameBorder="0" class="h-100" />');
            });
        </text>}

        @if (Model.ShoppingCart.Items.Any(x => x.IsDownload && x.HasUserAgreement))
        {<text>
            $('a.download-user-agreement').on('click', function () {
                const url = '@(Url.Action("GetUserAgreement", "Download"))?productId=' + $(this).attr('data-id');
                const dialog = $('#user-agreement-modal');

                dialog.find('.modal-body').empty();

                $.get(url, function (html) {
                    dialog.find('.modal-body').html(html);
                });

                dialog.modal();
                return false;
            });
        </text>}

        function setBuyButtonState(disable) {
            buyButton.prop('disabled', disable);
            buyButton.find('.fa')
                .removeClass('fa-angle-right fa-spinner fa-spin')
                .addClass(disable ? 'fa-spinner fa-spin' : 'fa-angle-right');
        }

        function processBuyButtonClick(customerAgreed, showThrobber) {
            var termOfServiceOk = true,
                userAgreementsOk = true,
                esdRevocationWaiverOk = true,
                cartItems = $('#cart-items');

            if (_.isTrue(customerAgreed)) {
                // Reverse apply. We do that just to indicate that no entered data is lost.
                $("#CustomerComment").val($("#customercommenthidden").val());
            }
            else {
                $("#customercommenthidden").val($("#CustomerComment").val());
            }

            // Terms of services.
            @if (Model.TermsOfServiceEnabled)
            {<text>
                if (!$('#termsofservice').is(':checked')) {
                    displayNotification(@T("Checkout.TermsOfService.PleaseAccept").JsValue, "error");
                    termOfServiceOk = false;
                    $.scrollTo($('#termsofservice'), 800, { offset: -70 });
                }
                else {
                    termOfServiceOk = true;
                }
            </text>}

            // Agree user agreement for downloadable products.
            cartItems.find('input[name^=AgreeUserAgreement]').each(function () {
                if (_.isTrue(customerAgreed)) {
                    $(this).prop('checked', true);
                }
                else if (!$(this).is(':checked')) {
                    userAgreementsOk = false;
                    displayNotification(@T("Checkout.DownloadUserAgreement.PleaseAgree").JsValue);
                    if (termOfServiceOk) {
                        $.scrollTo(cartItems, 800, { offset: -20 });
                    }
                    return false;
                }
            });

            // Agree ESD revocation waiver.
			@if(Model.ShowEsdRevocationWaiverBox)
			{<text>
                cartItems.find('input[name^=AgreeEsdRevocationWaiver]').each(function () {
                    if (_.isTrue(customerAgreed)) {
                        $(this).prop('checked', true);
                    }
                    else if (!$(this).is(':checked')) {
                        esdRevocationWaiverOk = false;
                        displayNotification(@T("Checkout.EsdRevocationWaiverConfirmation.PleaseAgree").JsValue);
                        if (termOfServiceOk) {
                            $.scrollTo(cartItems, 800, { offset: -20 });
                        }
                        return false;
                    }
                });
            </text>}

            if (termOfServiceOk && userAgreementsOk && esdRevocationWaiverOk) {
                var submitOrderEvent = jQuery.Event('submitOrder');
                submitOrderEvent.isOrderValid = true;
                submitOrderEvent.isMobile = false;
                submitOrderEvent.disableBuyButton = false;

                $(document).trigger(submitOrderEvent);

                if (true === submitOrderEvent.isOrderValid) {
                    try {
                        setBuyButtonState(true);

                        if (_.isTrue(showThrobber)) {
                            $.throbber.show({ white: true, small: false, speed: 0, message: @T("Checkout.OrderCompletes").JsValue});
                        }
                    }
                    catch (e) { }

                    $('#confirm-order-form').submit();
                }
                else if (true === submitOrderEvent.disableBuyButton) {
                    setBuyButtonState(true);
                }
            }
        }
    });
</script>