@model ProductModel

@if (Model.Id == 0)
{
    <div class="alert alert-danger">
        @T("Admin.Catalog.Products.SpecificationAttributes.SaveBeforeEdit")
    </div>
    return;
}

@if (ViewBag.SpecificationAttributesCount == 0)
{
    <div class="alert alert-danger">
        @T("Admin.Catalog.Products.SpecificationAttributes.NoAttributes")
    </div>
    return;
}

<div class="adminContent mb-5">
    <div class="adminRow">
        <div class="admin-config-group">
            <div class="head">@T("Admin.Catalog.Products.SpecificationAttributes.AddNew")</div>
        </div>
    </div>
    <div class="adminRow">
        <div class="adminTitle">
            <smart-label asp-for="AddSpecificationAttributeModel.SpecificationAttributeId" />
        </div>
        <div class="adminData">
            <select asp-for="AddSpecificationAttributeModel.SpecificationAttributeId"
                    data-select-url="@Url.Action("AllSpecificationAttributes", "SpecificationAttribute")">
            </select>
            <span asp-validation-for="AddSpecificationAttributeModel.SpecificationAttributeId"></span>
        </div>
    </div>
    <div class="adminRow">
        <div class="adminTitle">
            <smart-label asp-for="AddSpecificationAttributeModel.SpecificationAttributeOption" />
        </div>
        <div class="adminData">
            <select asp-for="AddSpecificationAttributeModel.SpecificationAttributeOption" data-tags="true"></select>
            <span asp-validation-for="AddSpecificationAttributeModel.SpecificationAttributeOption"></span>
        </div>
    </div>
    <div class="adminRow">
        <div class="adminTitle">
            <smart-label asp-for="AddSpecificationAttributeModel.AllowFiltering" />
        </div>
        <div class="adminData">
            <editor asp-for="AddSpecificationAttributeModel.AllowFiltering" />
            <span asp-validation-for="AddSpecificationAttributeModel.AllowFiltering"></span>
        </div>
    </div>
    <div class="adminRow">
        <div class="adminTitle">
            <smart-label asp-for="AddSpecificationAttributeModel.ShowOnProductPage" />
        </div>
        <div class="adminData">
            <editor asp-for="AddSpecificationAttributeModel.ShowOnProductPage" />
            <span asp-validation-for="AddSpecificationAttributeModel.ShowOnProductPage"></span>
        </div>
    </div>
    <div class="adminRow">
        <div class="adminTitle">
            <smart-label asp-for="AddSpecificationAttributeModel.DisplayOrder" />
        </div>
        <div class="adminData">
            <editor asp-for="AddSpecificationAttributeModel.DisplayOrder" />
            <span asp-validation-for="AddSpecificationAttributeModel.DisplayOrder"></span>
        </div>
    </div>
    <div class="adminRow">
        <div class="adminTitle">
            &nbsp;
        </div>
        <div class="adminData">
            <button type="button" name="addProductSpec" id="addProductSpec" class="btn btn-primary">
                <i class="fa fa-plus"></i>
                <span>@T("Admin.Catalog.Products.SpecificationAttributes.AddButton")</span>
            </button>
        </div>
    </div>
</div>

<script>
    $(function () {
        $("#@(Html.IdFor(x => x.AddSpecificationAttributeModel.SpecificationAttributeId))").on('change', function() {
            const attributeId = $(this).val();
            let options = $("#@(Html.IdFor(x => x.AddSpecificationAttributeModel.SpecificationAttributeOption))");

            $.ajax({
                cache: false,
                type: "GET",
                url: "@Url.Action("GetOptionsByAttributeId", "SpecificationAttribute")",
                data: { "attributeId": attributeId },
                success: (response) => {
                    options.html('');
                    $.each(response, (id, option) => {
                        options.append($('<option></option>').val(option.id).html(option.name));
                    });
                    options.trigger("change");
                },
                error: () => {
                    alert('Failed to retrieve specification options.')
                }
            });
        }).trigger('change');

        $(document).on("click", "#addProductSpec", () => {
            const attributeId = $("#@(Html.IdFor(x => x.AddSpecificationAttributeModel.SpecificationAttributeId))").val();
            let elOption = $("#@(Html.IdFor(x => x.AddSpecificationAttributeModel.SpecificationAttributeOption))");
            const option = elOption.val();
            const allowFiltering = $("#@(Html.IdFor(x => x.AddSpecificationAttributeModel.AllowFiltering))").val();
            const showOnProductPage = $("#@(Html.IdFor(x => x.AddSpecificationAttributeModel.ShowOnProductPage))").val();
            let elDisplayOrder = $("#@(Html.IdFor(x => x.AddSpecificationAttributeModel.DisplayOrder))");
            const displayOrder = elDisplayOrder.val();

            $('#addProductSpec').attr('disabled', true);

            $.ajax({
                cache: false,
                type: "POST",
                url: "@(Url.Action("ProductSpecificationAttributeAdd", "Product"))",
                data: {
                    "attributeId": attributeId,
                    "attributeOption": option,
                    "allowFiltering": allowFiltering,
                    "showOnProductPage": showOnProductPage,
                    "displayOrder": displayOrder,
                    "productId": @Model.Id
                },
                success: (response) => {
                    $('#addProductSpec').attr('disabled', false);
                    if (response.success) {
                        window["specificationattributes-grid"].$children[0].read();
                    }
                    else {
                        displayNotification(response.message, 'warning');
                    }

                    elDisplayOrder.val(1 + (parseInt(displayOrder) || 0)).trigger('change');
                },
                error: () => {
                    alert('Failed to add specification attribute.')
                    $('#addProductSpec').attr('disabled', false);
                }
            });
        });
    });
</script>

@{
    var gridViewData = new ViewDataDictionary(this.ViewData);
    gridViewData["Parent"] = Model;
}

<partial name="Grids/_Grid.SpecificationAttributes" model="null" view-data="gridViewData" />
